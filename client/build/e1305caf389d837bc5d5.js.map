{"version":3,"sources":["webpack:///e1305caf389d837bc5d5.js","webpack:///webpack/bootstrap e1305caf389d837bc5d5","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./node_modules/howler/dist/howler.js","webpack:///(webpack)/buildin/global.js","webpack:///./client/src/utils/filename-sequence.js","webpack:///./client/src/utils/logger.js","webpack:///./client/src/index.js","webpack:///./client/src/abstractions/SfxHandler.js","webpack:///./node_modules/@internet/raf/lib/index.js","webpack:///./node_modules/@internet/raf/lib/RafTimer.js","webpack:///./node_modules/@internet/raf/lib/raf.js","webpack:///./client/src/abstractions/RandomChain.js","webpack:///./client/src/utils/array-random.js","webpack:///./client/src/utils/array-intersection.js","webpack:///./client/src/utils/array-last.js","webpack:///./client/src/abstractions/DroneHandler.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","writable","key","_createClass","protoProps","staticProps","HowlerGlobal","this","init","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","test","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","src","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","indexOf","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","index","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","_endFn","splice","remCache","cache","on","events","off","isId","keys","Array","isArray","msg","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","error","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","global","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","g","Function","eval","__webpack_exports__","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","_unsupportedIterableToArray","F","done","value","_e","f","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","constructor","arr","arr2","REGEX","tag","varname","numbering","pattern","context","result","baseIndex","padLength","number","String","padStart","updateLog","container","innerHTML","entries","map","join","escapeHtml","unsafe","log","message","ENV","forceLogger","production","HISTORY_LENGTH","lastEntry","increment","time","counter","update","toUTCString","timers","entry","includes","getElementById","warn","setup","body","classList","add","requestFullscreen","video","querySelector","passivePlaybackRate","sfx","SfxHandler","onPlay","videoPlaybackRateRestorer","activePlaybackRate","DroneHandler","playNext","hardware","stack","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default","__WEBPACK_IMPORTED_MODULE_2_howler__","__WEBPACK_IMPORTED_MODULE_3__internet_raf__","__WEBPACK_IMPORTED_MODULE_4_abstractions_RandomChain__","__WEBPACK_IMPORTED_MODULE_5_utils_filename_sequence__","IndexesArray","fill","_","soundsLength","speakersLength","filenamePattern","soundIndex","speakerIndex","sequence","soundsIndex","RandomChain","speakersIndex","raf","handleRaf","find","speakers","isPlaying","RafTimer","delay","cb","autostart","_stopped","_remainder","_delay","_remainingTime","_callback","restart","u","setCallback","newCallback","newDelay","useRemainder","dt","dispose","_frame","timestamp","_lastDate","_rafHandler","_once","root","requestAnimationFrame","_complex","_beforeObservers","_observers","_afterObservers","_swapRunner","_addObserver","prepend","unshift","_removeObserver","addBefore","addAfter","removeBefore","removeAfter","remove","instant","requestOnce","cancelAnimationFrame","__WEBPACK_IMPORTED_MODULE_2_utils_array_random__","__WEBPACK_IMPORTED_MODULE_3_utils_array_last__","array","historyLength","prng","random","history","lastOf","item","randomOf","exclude","use","excludedValues","possibleValues","filter","v","intersectionOf","floor","arr1","__WEBPACK_IMPORTED_MODULE_3_utils_logger__","__WEBPACK_IMPORTED_MODULE_4_utils_filename_sequence__","currentSound","timer"],"mappings":"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","file":"e1305caf389d837bc5d5.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 6);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Micro language allowing user to define filename pattern for files sequence,\n * using multiple variables with different n-based indexing and 0 padding:\n\n  {{foo:1}}.txt\n\n  for (var foo = 0; foo < 3; foo++)\n\n  → 1.txt\n  → 2.txt\n  → 3.txt\n\n  {{foo:001}}_{{bar:0}}.txt\n\n  for (var foo = 0; foo < 3; foo++)\n    for (var bar = 0; bar < 3; foo++)\n\n  → 001_0.txt\n  → 001_1.txt\n  → 001_2.txt\n  → 002_0.txt\n  → 002_1.txt\n  → 002_2.txt\n  → 003_0.txt\n  → 003_1.txt\n  → 003_2.txt\n */\nvar REGEX = {\n  tag: /{{[a-zA-Z_]+:[0-9]+}}/g,\n  varname: /{{([a-zA-Z_]+):[0-9]+}}/,\n  numbering: /{{[a-zA-Z_]+:([0-9]+)}}/\n};\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (pattern, context) {\n  var result = pattern; // Find all {{varname:000}} tags\n\n  var _iterator = _createForOfIteratorHelper(result.match(REGEX.tag)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var tag = _step.value;\n      var varname = tag.match(REGEX.varname)[1];\n      if (!varname || !context.hasOwnProperty(varname)) continue; // {{foo:00}} will start count at 0, {{foo:01}} at 1, etc…\n\n      var numbering = tag.match(REGEX.numbering)[1];\n      var baseIndex = parseInt(numbering);\n      var padLength = numbering.length;\n      var number = String(context[varname] + baseIndex).padStart(padLength, '0');\n      result = result.replace(tag, number);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n});\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = log;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return warn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return error; });\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = time;\nvar HISTORY_LENGTH = 10;\nvar container = document.getElementById('logger');\nvar entries = [];\nvar timers = {};\nvar lastEntry;\n\nfunction updateLog() {\n  container.innerHTML = entries.map(function (m) {\n    return m.value;\n  }).join('<br>');\n}\n\nfunction escapeHtml(unsafe) {\n  return String(unsafe).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n}\n\nfunction log(message) {\n  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'log';\n  if (!window.ENV.forceLogger && window.ENV.production) return;\n  if (entries.length >= HISTORY_LENGTH) entries.shift();\n\n  if (lastEntry && lastEntry.message === message) {\n    lastEntry.increment();\n    return;\n  }\n\n  lastEntry = {\n    time: new Date(),\n    message: message,\n    method: method,\n    counter: 0,\n    increment: function increment() {\n      this.counter++;\n      this.time = new Date();\n      updateLog();\n    },\n    update: function update(message) {\n      this.message = message;\n      updateLog();\n    },\n\n    get value() {\n      return \"[\".concat(this.time.toUTCString(), \"] \").concat(this.counter ? \"[\".concat(this.counter, \"]\") : '', \" <span class='\").concat(this.method, \"'>\").concat(escapeHtml(this.message), \"</span>\");\n    }\n\n  };\n  entries.push(lastEntry);\n  updateLog();\n  return lastEntry;\n}\nvar warn = function warn(message) {\n  return log(message, 'warn');\n};\nvar error = function error(message) {\n  return log(message, 'error');\n};\nfunction time(name) {\n  timers[name] = Date.now();\n  var entry = log(name + ': …');\n  return {\n    end: function end() {\n      var message = name + ': ' + (Date.now() - timers[name]) + 'ms';\n      if (entries.includes(entry)) entry.update(message);else log(message);\n      delete timers[name];\n    }\n  };\n}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(7);\nmodule.exports = __webpack_require__(18);\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_abstractions_SfxHandler__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_abstractions_DroneHandler__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_utils_logger__ = __webpack_require__(5);\n\n\n\nObject(__WEBPACK_IMPORTED_MODULE_2_utils_logger__[\"d\" /* warn */])('Logging is active. Set `forceLogger` to false to disable logging.');\nwindow.addEventListener('click', function () {\n  try {\n    setup();\n  } catch (e) {\n    console.error(e);\n    Object(__WEBPACK_IMPORTED_MODULE_2_utils_logger__[\"a\" /* error */])(e.stack || e);\n  }\n}, {\n  once: true\n});\n\nfunction setup() {\n  document.body.classList.add('is-running'); // Enable fullscreen on production\n\n  if (window.ENV.production && document.body.requestFullscreen) {\n    document.body.requestFullscreen();\n  } // Load the video\n\n\n  var video = document.querySelector('video');\n  video.loop = true;\n  video.src = window.ENV.video.source;\n  video.playbackRate = window.ENV.video.passivePlaybackRate;\n  Object(__WEBPACK_IMPORTED_MODULE_2_utils_logger__[\"b\" /* log */])('Loading ' + video.src);\n  video.play(); // Instanciate the sfx handler\n\n  var sfx = new __WEBPACK_IMPORTED_MODULE_0_abstractions_SfxHandler__[\"a\" /* default */]({\n    onPlay: function onPlay() {\n      if (!video.duration) return;\n      window.clearTimeout(window.videoPlaybackRateRestorer);\n      video.playbackRate = window.ENV.video.activePlaybackRate;\n      window.videoPlaybackRateRestorer = window.setTimeout(function () {\n        video.playbackRate = window.ENV.video.passivePlaybackRate;\n      }, 20);\n    }\n  }); // Instanciate the drone handler\n\n  var droneHandler = new __WEBPACK_IMPORTED_MODULE_1_abstractions_DroneHandler__[\"a\" /* default */]();\n  droneHandler.playNext(); // Handle Arza hardware trigger events\n\n  window.addEventListener('keypress', function (e) {\n    if (e.key !== window.ENV.hardware.key) return;\n    Object(__WEBPACK_IMPORTED_MODULE_2_utils_logger__[\"b\" /* log */])('ArzaNoise has been triggered');\n    sfx.play();\n    video.currentTime = video.duration - video.currentTime;\n  });\n}\n\n/***/ }),\n/* 8 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SfxHandler; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_howler__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_howler___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_howler__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internet_raf__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_abstractions_RandomChain__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_utils_filename_sequence__ = __webpack_require__(4);\n\n\n\n/* eslint-disable no-eval */\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_2_howler__[\"Howler\"].autoUnlock = false;\n\nvar IndexesArray = function IndexesArray(length) {\n  return new Array(length).fill(true).map(function (_, i) {\n    return i;\n  });\n};\n\nvar SfxHandler = /*#__PURE__*/function () {\n  function SfxHandler() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$onPlay = _ref.onPlay,\n        onPlay = _ref$onPlay === void 0 ? function () {} : _ref$onPlay,\n        _ref$soundsLength = _ref.soundsLength,\n        soundsLength = _ref$soundsLength === void 0 ? window.ENV.SfxHandler.soundsLength : _ref$soundsLength,\n        _ref$speakersLength = _ref.speakersLength,\n        speakersLength = _ref$speakersLength === void 0 ? window.ENV.SfxHandler.speakersLength : _ref$speakersLength,\n        _ref$filenamePattern = _ref.filenamePattern,\n        filenamePattern = _ref$filenamePattern === void 0 ? window.ENV.SfxHandler.filenamePattern : _ref$filenamePattern;\n\n    __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default()(this, SfxHandler);\n\n    this.play = this.play.bind(this);\n    this.onPlay = onPlay; // Bi-dimensional array of all sounds\n\n    this.sounds = [];\n\n    for (var soundIndex = 0; soundIndex < soundsLength; soundIndex++) {\n      var sound = [];\n\n      for (var speakerIndex = 0; speakerIndex < speakersLength; speakerIndex++) {\n        sound.push(new __WEBPACK_IMPORTED_MODULE_2_howler__[\"Howl\"]({\n          src: Object(__WEBPACK_IMPORTED_MODULE_5_utils_filename_sequence__[\"a\" /* default */])(filenamePattern, {\n            soundIndex: soundIndex,\n            speakerIndex: speakerIndex\n          }),\n          preload: true\n        }));\n      }\n\n      this.sounds.push(sound);\n    } // Random chain of all sounds indexes\n\n\n    this.soundsIndex = new __WEBPACK_IMPORTED_MODULE_4_abstractions_RandomChain__[\"a\" /* default */](IndexesArray(soundsLength), 2); // Random chain of all speakers indexes\n\n    this.speakersIndex = new __WEBPACK_IMPORTED_MODULE_4_abstractions_RandomChain__[\"a\" /* default */](IndexesArray(speakersLength), 2);\n    __WEBPACK_IMPORTED_MODULE_3__internet_raf__[\"a\" /* default */].add(this.handleRaf.bind(this));\n  }\n\n  __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default()(SfxHandler, [{\n    key: \"isPlaying\",\n    get: function get() {\n      return !!this.sounds.find(function (speakers) {\n        return speakers.find(function (sound) {\n          return sound.playing();\n        });\n      });\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      var soundIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.soundsIndex.next;\n      var speakerIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.speakersIndex.next;\n      var sound = this.sounds[soundIndex][speakerIndex];\n      sound.play();\n    }\n  }, {\n    key: \"handleRaf\",\n    value: function handleRaf() {\n      if (!this.isPlaying) return;\n      this.onPlay();\n    }\n  }]);\n\n  return SfxHandler;\n}();\n\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__RafTimer_js__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fpsLimiter_js__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__raf_js__ = __webpack_require__(12);\n/* unused harmony reexport RafTimer */\n/* unused harmony reexport fpsLimiter */\n/* unused harmony reexport raf */\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_2__raf_js__[\"a\" /* default */]);\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Create a new RafTimer instance.\n * @class RafTimer\n * @param {number} delay Number of milliseconds before executing the callback.\n * @param {Function} cb Callback function executed when the timer hit 0. For convenience, a restart method will be passed as 1st arg of the cb function.\n * @param {boolean} [autostart=true] Optional (default true). Auto-start the timer (Don't need to call start() method).\n * @constructor\n * @example\n * import { raf, RafTimer } from '@internet/raf'\n *\n * const timer = new RafTimer(2000, restart => {\n *   console.log('Will be logged after 2000ms')\n *   restart() // Restart the timer. onDone will be called after another 2000ms.\n * })\n *\n * raf.add(dt => timer.update(dt))\n */\n\nfunction RafTimer (delay, cb, autostart) {\n  if (autostart === void 0) autostart = true\n\n  this._stopped = !autostart\n  this._remainder = 0\n  this._delay = delay | 0\n  this._remainingTime = delay\n  this._callback = cb === undefined ? function () {} : cb\n\n  // fast binding\n  var restart = this.restart\n  var self = this\n  this.restart = function (n, u) { restart.call(self, n, u) }\n\n  if (this._delay === 0) this._stopped = true\n}\n\n/**\n * Set a new callback function.\n * @method\n * @param {function} newCallback New callback function. For convenience, a restart method will be passed as 1st arg of the cb function.\n * @param {number} [newDelay] Optional. Set a new delay (in ms). If set, the timer will be restarted\n */\nRafTimer.prototype.setCallback = function setCallback (newCallback, newDelay) {\n  this._callback = newCallback === undefined ? function () {} : newCallback\n  if (newDelay) this.restart(newDelay)\n}\n\n/**\n * Stop the timer. update() calls will do nothing.\n * @method\n */\nRafTimer.prototype.stop = function stop () {\n  this._stopped = true\n}\n\n/**\n * Start the timer if stopped.\n * @method\n */\nRafTimer.prototype.start = function start () {\n  if (!this._stopped) return\n  this.restart()\n}\n\n/**\n * Restart the timer\n * @method\n * @param {number} newDelay\n * @param {boolean} [useRemainder=true] Optional (default true). Use deltatime's remainder from the last time the timer hits 0.\n */\nRafTimer.prototype.restart = function restart (newDelay, useRemainder) {\n  if (useRemainder === void 0) useRemainder = true\n\n  if (newDelay !== undefined) this._delay = newDelay\n  this._stopped = false\n  this._remainingTime = this._delay - (this._remainder * (+useRemainder))\n}\n\n/**\n * Update remaining time. Usually executed inside a requestAnimationFrame call.\n * @method\n * @param {number} dt Time elapsed since the last call (in ms).\n */\nRafTimer.prototype.update = function update (dt) {\n  if (this._stopped) return\n  this._remainingTime -= dt\n  if (this._remainingTime <= 0) {\n    this._stopped = true\n    this._remainder = (-this._remainingTime) % this._delay\n    this._callback(this.restart)\n  } else {\n    this._remainder = 0\n  }\n}\n\n/**\n * Stop the timer and remove callback reference\n * @method\n */\nRafTimer.prototype.dispose = function dispose () {\n  this._callback = this.restart = function () {}\n  this._stopped = true\n  this._remainder = 0\n  this._remainingTime = this._delay\n}\n\n/* unused harmony default export */ var _unused_webpack_default_export = (RafTimer);\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Limit function calls to a specific framerate\n * @param {number} [framerate=30] Framerate\n * @param {function} callback Function to be called at the specified frame interval\n * @return {function} Framerate-limited function to add to your raf\n * @example\n * import { raf, fpsLimiter } from '@internet/raf'\n *\n * function tick () {\n *   console.log('called each 10 fps')\n * }\n *\n * const limited = fpsLimiter(10, tick)\n * raf.add(limited)\n */\nfunction fpsLimiter (framerate, callback) {\n  if (callback === void 0) throw new Error('You must specify a callback')\n  if (framerate === void 0) framerate = 30\n  var _interval = 1000 / framerate\n  var _remainingTime = 0\n  var _elapsedTime = 0\n  return function (dt) {\n    _remainingTime -= dt\n    _elapsedTime += dt\n    if (_remainingTime <= 0) {\n      callback(_elapsedTime)\n      _elapsedTime = 0\n      _remainingTime = _interval + (_remainingTime % _interval)\n    }\n  }\n}\n\n/* unused harmony default export */ var _unused_webpack_default_export = (fpsLimiter);\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\n/**\n * Core of the raf package\n * @module raf\n * @type {Object}\n * @example\n * import { raf } from '@internet/raf'\n *\n * function tick (dt) {\n *  console.log('called on new frame')\n * }\n *\n * raf.add(tick)\n */\n\nvar root = typeof window === 'undefined' ? global : window\nvar _observers = []\nvar _afterObservers = []\nvar _beforeObservers = []\nvar _rafHandler = null\nvar _lastDate = null\nvar _once = false\nvar _complex = false\n\n/**\n * Time elapsed between the previous and the current frame\n * @type {number}\n * @static\n * @category properties\n */\nvar time\n\n/**\n * Current delta time\n * @type {number}\n * @static\n * @category properties\n */\nvar dt\n\nfunction _frame (timestamp) {\n  // compute deltatime and time\n  if (timestamp === void 0) timestamp = 0\n  if (_lastDate === null) _lastDate = timestamp\n  dt = timestamp - _lastDate\n  time += dt\n  _lastDate = timestamp\n  // we request the frame now, allowing to cancel it from observers\n  _rafHandler = _once ? null : root.requestAnimationFrame(_frame)\n  if (_once) _once = false\n  // call all observers\n  var i\n  if (_complex) {\n    for (i = 0; i < _beforeObservers.length; i++) _beforeObservers[i](dt)\n    for (i = 0; i < _observers.length; i++) _observers[i](dt)\n    for (i = 0; i < _afterObservers.length; i++) _afterObservers[i](dt)\n  } else {\n    for (i = 0; i < _observers.length; i++) _observers[i](dt)\n  }\n}\n\nfunction _swapRunner () {\n  _complex = !!(_afterObservers.length > 0 || _beforeObservers.length > 0)\n}\n\nfunction _addObserver (arr, fn, prepend) {\n  if (!fn || !arr) return false\n  if (~arr.indexOf(fn)) return false\n  prepend = !!prepend\n  prepend ? arr.unshift(fn) : arr.push(fn)\n  return true\n}\n\nfunction _removeObserver (arr, fn) {\n  if (!fn) return false\n  var index = arr.indexOf(fn)\n  if (!~index) return false\n  arr.splice(index, 1)\n  return !!(arr.length === 0)\n}\n\n/**\n * Add a function for execution at the beginning of the raf call\n * Calling addBefore will not start the raf.\n * @param {function} fn Function to be called at the start of the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n * @static\n * @category methods\n */\nfunction addBefore (fn, prepend) {\n  _addObserver(_beforeObservers, fn, prepend) && _swapRunner()\n}\n\n/**\n * Add a function for execution at the end of the raf call\n * Calling addAfter will not start the raf.\n * @param {function} fn Function to be called at the end of the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n * @static\n * @category methods\n */\nfunction addAfter (fn, prepend) {\n  _addObserver(_afterObservers, fn, prepend) && _swapRunner()\n}\n\n/**\n * Add a function for execution on each frame\n * @param {function} fn Function to be called\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n * @static\n * @category methods\n */\nfunction add (fn, prepend) {\n  _addObserver(_observers, fn, prepend) && start()\n}\n\n/**\n * Remove a function for execution at the beginning of the raf call\n * Calling removeBefore will not stop the raf.\n * @param {function} fn Function to remove from the raf\n * @static\n * @category methods\n */\nfunction removeBefore (fn) {\n  _removeObserver(_beforeObservers, fn) && _swapRunner()\n}\n\n/**\n * Remove a function for execution at the end of the raf call\n * Calling removeAfter will not stop the raf.\n * @param {function} fn Function to remove from the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n * @static\n * @category methods\n */\nfunction removeAfter (fn, prepend) {\n  _removeObserver(_afterObservers, fn) && _swapRunner()\n}\n\n/**\n * Remove a function for execution on each frame\n * @param {function} fn Function to remove from the raf\n * @static\n * @category methods\n */\nfunction remove (fn) {\n  _removeObserver(_observers, fn) && stop()\n}\n\n/**\n * Force start the raf. You usually don't need to use it.\n * @param {boolean} [instant=false] Directly make a raf call without waiting for the next frame (default false)\n * @static\n * @category methods\n */\nfunction start (instant) {\n  _once = false\n  if (_rafHandler) return\n  instant = !!instant\n  _lastDate = null\n  if (instant) _frame()\n  else _rafHandler = root.requestAnimationFrame(_frame)\n}\n\n/**\n * Request once the raf. Will not be executed if the raf is already running.\n * @static\n * @category methods\n */\nfunction requestOnce () {\n  if (_rafHandler) return\n  _once = true\n  _lastDate = null\n  _rafHandler = root.requestAnimationFrame(_frame)\n}\n\n/**\n * Force stop the raf. You usually don't need to use it.\n * @static\n * @category methods\n */\nfunction stop () {\n  if (!_rafHandler) return\n  root.cancelAnimationFrame(_rafHandler)\n  _rafHandler = null\n}\n\n/**\n * Remove all observers from the raf singleton and stop the raf if it's running. Reset time.\n * @static\n * @category methods\n */\nfunction dispose () {\n  stop()\n  _observers.length = 0\n  _afterObservers.length = 0\n  _beforeObservers.length = 0\n  _complex = false\n  _lastDate = null\n  time = 0\n  dt = 0\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  add: add,\n  addAfter: addAfter,\n  addBefore: addBefore,\n  remove: remove,\n  removeAfter: removeAfter,\n  removeBefore: removeBefore,\n  start: start,\n  stop: stop,\n  time: time,\n  dt: dt,\n  requestOnce: requestOnce,\n  dispose: dispose\n});\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(3)))\n\n/***/ }),\n/* 13 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return RandomChain; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_utils_array_random__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_array_last__ = __webpack_require__(16);\n\n\n\n\n\nvar RandomChain = /*#__PURE__*/function () {\n  function RandomChain() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var historyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var prng = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.random;\n\n    __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default()(this, RandomChain);\n\n    this.array = array;\n    this.prng = prng;\n    this.historyLength = Math.min(historyLength, array.length - 1);\n    this.reset();\n  }\n\n  __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default()(RandomChain, [{\n    key: \"reset\",\n    value: function reset() {\n      this.history = [];\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.array.length;\n    }\n  }, {\n    key: \"previous\",\n    get: function get() {\n      return Object(__WEBPACK_IMPORTED_MODULE_3_utils_array_last__[\"a\" /* default */])(this.history);\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      if (!this.length) return;\n      var item = Object(__WEBPACK_IMPORTED_MODULE_2_utils_array_random__[\"a\" /* default */])(this.array, {\n        exclude: this.history,\n        prng: this.prng\n      });\n      return this.use(item);\n    }\n  }, {\n    key: \"use\",\n    value: function use(item) {\n      if (!this.array.length) return;\n      this.history.push(item);\n      if (this.history.length > this.historyLength) this.history.shift();\n      return item;\n    }\n  }]);\n\n  return RandomChain;\n}();\n\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utils_array_intersection__ = __webpack_require__(15);\n\n/**\n * Pick a random entry of an array, not picking any value of the exclude array.\n * If no values can be picked because of the exclude array, skip the exclude\n * array.\n * A custom RNG can be specified.\n */\n\nfunction randomOf(arr) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$exclude = _ref.exclude,\n      exclude = _ref$exclude === void 0 ? undefined : _ref$exclude,\n      _ref$prng = _ref.prng,\n      prng = _ref$prng === void 0 ? Math.random : _ref$prng;\n\n  var excludedValues = Array.isArray(exclude) ? exclude : [exclude];\n  var possibleValues = excludedValues && excludedValues.length ? arr.filter(function (v) {\n    return !excludedValues.includes(v);\n  }) : arr;\n  var allValuesAreExcluded = Object(__WEBPACK_IMPORTED_MODULE_0_utils_array_intersection__[\"a\" /* default */])(possibleValues, excludedValues).length === possibleValues.length;\n  return allValuesAreExcluded ? randomOf(arr, {\n    exclude: undefined,\n    prng: prng\n  }) : possibleValues[Math.floor(prng() * possibleValues.length)];\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (randomOf);\n\n/***/ }),\n/* 15 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n * Return an array of values which are present in both arr1 and arr2\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (function () {\n  var arr1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var arr2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return arr1.filter(function (v) {\n    return arr2.includes(v);\n  });\n});\n\n/***/ }),\n/* 16 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (arr) {\n  return arr[arr.length - 1];\n});\n\n/***/ }),\n/* 17 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DroneHandler; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_howler__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_howler___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_howler__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_logger__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_utils_filename_sequence__ = __webpack_require__(4);\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_2_howler__[\"Howler\"].autoUnlock = false;\n\nvar DroneHandler = /*#__PURE__*/function () {\n  function DroneHandler() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$soundsLength = _ref.soundsLength,\n        soundsLength = _ref$soundsLength === void 0 ? window.ENV.DroneHandler.soundsLength : _ref$soundsLength,\n        _ref$filenamePattern = _ref.filenamePattern,\n        filenamePattern = _ref$filenamePattern === void 0 ? window.ENV.DroneHandler.filenamePattern : _ref$filenamePattern;\n\n    __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default()(this, DroneHandler);\n\n    this.playNext = this.playNext.bind(this);\n    this.soundIndex = -1;\n    this.sounds = [];\n\n    for (var soundIndex = 0; soundIndex < soundsLength; soundIndex++) {\n      this.sounds.push(new __WEBPACK_IMPORTED_MODULE_2_howler__[\"Howl\"]({\n        src: Object(__WEBPACK_IMPORTED_MODULE_4_utils_filename_sequence__[\"a\" /* default */])(filenamePattern, {\n          soundIndex: soundIndex\n        }),\n        preload: false,\n        onend: this.playNext\n      }));\n    }\n  }\n\n  __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default()(DroneHandler, [{\n    key: \"currentSound\",\n    get: function get() {\n      return this.sounds[this.soundIndex];\n    }\n  }, {\n    key: \"playNext\",\n    value: function playNext() {\n      var _this = this;\n\n      this.currentSound && this.currentSound.stop();\n      this.soundIndex = (this.soundIndex + 1) % this.sounds.length;\n      var timer = Object(__WEBPACK_IMPORTED_MODULE_3_utils_logger__[\"c\" /* time */])('Loading ' + this.currentSound._src);\n      this.currentSound.once('load', function () {\n        _this.currentSound.play();\n\n        timer.end();\n      });\n      this.currentSound.load();\n    }\n  }]);\n\n  return DroneHandler;\n}();\n\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// e1305caf389d837bc5d5.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e1305caf389d837bc5d5","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/classCallCheck.js\n// module id = 0\n// module chunks = 0","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/createClass.js\n// module id = 1\n// module chunks = 0","/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/howler/dist/howler.js\n// module id = 2\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0","/**\n * Micro language allowing user to define filename pattern for files sequence,\n * using multiple variables with different n-based indexing and 0 padding:\n\n  {{foo:1}}.txt\n\n  for (var foo = 0; foo < 3; foo++)\n\n  → 1.txt\n  → 2.txt\n  → 3.txt\n\n  {{foo:001}}_{{bar:0}}.txt\n\n  for (var foo = 0; foo < 3; foo++)\n    for (var bar = 0; bar < 3; foo++)\n\n  → 001_0.txt\n  → 001_1.txt\n  → 001_2.txt\n  → 002_0.txt\n  → 002_1.txt\n  → 002_2.txt\n  → 003_0.txt\n  → 003_1.txt\n  → 003_2.txt\n */\n\nconst REGEX = {\n  tag: /{{[a-zA-Z_]+:[0-9]+}}/g,\n  varname: /{{([a-zA-Z_]+):[0-9]+}}/,\n  numbering: /{{[a-zA-Z_]+:([0-9]+)}}/\n}\n\nexport default (pattern, context) => {\n  let result = pattern\n\n  // Find all {{varname:000}} tags\n  for (const tag of result.match(REGEX.tag)) {\n    const varname = tag.match(REGEX.varname)[1]\n    if (!varname || !context.hasOwnProperty(varname)) continue\n\n    // {{foo:00}} will start count at 0, {{foo:01}} at 1, etc…\n    const numbering = tag.match(REGEX.numbering)[1]\n    const baseIndex = parseInt(numbering)\n    const padLength = numbering.length\n    const number = String(context[varname] + baseIndex).padStart(padLength, '0')\n\n    result = result.replace(tag, number)\n  }\n\n  return result\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/filename-sequence.js","const HISTORY_LENGTH = 10\n\nconst container = document.getElementById('logger')\nconst entries = []\nconst timers = {}\n\nlet lastEntry\n\nfunction updateLog () {\n  container.innerHTML = entries.map(m => m.value).join('<br>')\n}\n\nfunction escapeHtml (unsafe) {\n  return String(unsafe)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;')\n}\n\nexport function log (message, method = 'log') {\n  if (!window.ENV.forceLogger && window.ENV.production) return\n  if (entries.length >= HISTORY_LENGTH) entries.shift()\n\n  if (lastEntry && lastEntry.message === message) {\n    lastEntry.increment()\n    return\n  }\n\n  lastEntry = {\n    time: new Date(),\n    message,\n    method,\n    counter: 0,\n    increment: function () {\n      this.counter++\n      this.time = new Date()\n      updateLog()\n    },\n\n    update: function (message) {\n      this.message = message\n      updateLog()\n    },\n\n    get value () {\n      return `[${this.time.toUTCString()}] ${this.counter ? `[${this.counter}]` : ''} <span class='${this.method}'>${escapeHtml(this.message)}</span>`\n    }\n  }\n\n  entries.push(lastEntry)\n  updateLog()\n  return lastEntry\n}\n\nexport const warn = message => log(message, 'warn')\nexport const error = message => log(message, 'error')\n\nexport function time (name) {\n  timers[name] = Date.now()\n  const entry = log(name + ': …')\n\n  return {\n    end: () => {\n      const message = name + ': ' + (Date.now() - timers[name]) + 'ms'\n\n      if (entries.includes(entry)) entry.update(message)\n      else log(message)\n\n      delete timers[name]\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/logger.js","import SfxHandler from 'abstractions/SfxHandler'\nimport DroneHandler from 'abstractions/DroneHandler'\nimport { error, log, warn } from 'utils/logger'\n\nwarn('Logging is active. Set `forceLogger` to false to disable logging.')\n\nwindow.addEventListener('click', () => {\n  try {\n    setup()\n  } catch (e) {\n    console.error(e)\n    error(e.stack || e)\n  }\n}, { once: true })\n\nfunction setup () {\n  document.body.classList.add('is-running')\n\n  // Enable fullscreen on production\n  if (window.ENV.production && document.body.requestFullscreen) {\n    document.body.requestFullscreen()\n  }\n\n  // Load the video\n  const video = document.querySelector('video')\n  video.loop = true\n  video.src = window.ENV.video.source\n  video.playbackRate = window.ENV.video.passivePlaybackRate\n  log('Loading ' + video.src)\n  video.play()\n\n  // Instanciate the sfx handler\n  const sfx = new SfxHandler({\n    onPlay: () => {\n      if (!video.duration) return\n\n      window.clearTimeout(window.videoPlaybackRateRestorer)\n      video.playbackRate = window.ENV.video.activePlaybackRate\n\n      window.videoPlaybackRateRestorer = window.setTimeout(() => {\n        video.playbackRate = window.ENV.video.passivePlaybackRate\n      }, 20)\n    }\n  })\n\n  // Instanciate the drone handler\n  const droneHandler = new DroneHandler()\n  droneHandler.playNext()\n\n  // Handle Arza hardware trigger events\n  window.addEventListener('keypress', e => {\n    if (e.key !== window.ENV.hardware.key) return\n    log('ArzaNoise has been triggered')\n    sfx.play()\n    video.currentTime = video.duration - video.currentTime\n  })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/index.js","/* eslint-disable no-eval */\nimport { Howl, Howler } from 'howler'\nimport raf from '@internet/raf'\nimport RandomChain from 'abstractions/RandomChain'\nimport sequence from 'utils/filename-sequence'\n\nHowler.autoUnlock = false\n\nconst IndexesArray = length => new Array(length).fill(true).map((_, i) => i)\n\nexport default class SfxHandler {\n  constructor ({\n    onPlay = function () {},\n\n    soundsLength = window.ENV.SfxHandler.soundsLength,\n    speakersLength = window.ENV.SfxHandler.speakersLength,\n    filenamePattern = window.ENV.SfxHandler.filenamePattern\n  } = {}) {\n    this.play = this.play.bind(this)\n    this.onPlay = onPlay\n\n    // Bi-dimensional array of all sounds\n    this.sounds = []\n    for (let soundIndex = 0; soundIndex < soundsLength; soundIndex++) {\n      const sound = []\n      for (let speakerIndex = 0; speakerIndex < speakersLength; speakerIndex++) {\n        sound.push(new Howl({\n          src: sequence(filenamePattern, { soundIndex, speakerIndex }),\n          preload: true\n        }))\n      }\n      this.sounds.push(sound)\n    }\n\n    // Random chain of all sounds indexes\n    this.soundsIndex = new RandomChain(IndexesArray(soundsLength), 2)\n\n    // Random chain of all speakers indexes\n    this.speakersIndex = new RandomChain(IndexesArray(speakersLength), 2)\n\n    raf.add(this.handleRaf.bind(this))\n  }\n\n  get isPlaying () {\n    return !!this.sounds.find(speakers => speakers.find(sound => sound.playing()))\n  }\n\n  play (soundIndex = this.soundsIndex.next, speakerIndex = this.speakersIndex.next) {\n    const sound = this.sounds[soundIndex][speakerIndex]\n    sound.play()\n  }\n\n  handleRaf () {\n    if (!this.isPlaying) return\n    this.onPlay()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/abstractions/SfxHandler.js","import RafTimer from './RafTimer.js'\nimport fpsLimiter from './fpsLimiter.js'\nimport raf from './raf.js'\n\nexport { RafTimer, fpsLimiter, raf }\nexport default raf\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@internet/raf/lib/index.js\n// module id = 9\n// module chunks = 0","'use strict'\n\n/**\n * Create a new RafTimer instance.\n * @class RafTimer\n * @param {number} delay Number of milliseconds before executing the callback.\n * @param {Function} cb Callback function executed when the timer hit 0. For convenience, a restart method will be passed as 1st arg of the cb function.\n * @param {boolean} [autostart=true] Optional (default true). Auto-start the timer (Don't need to call start() method).\n * @constructor\n * @example\n * import { raf, RafTimer } from '@internet/raf'\n *\n * const timer = new RafTimer(2000, restart => {\n *   console.log('Will be logged after 2000ms')\n *   restart() // Restart the timer. onDone will be called after another 2000ms.\n * })\n *\n * raf.add(dt => timer.update(dt))\n */\n\nfunction RafTimer (delay, cb, autostart) {\n  if (autostart === void 0) autostart = true\n\n  this._stopped = !autostart\n  this._remainder = 0\n  this._delay = delay | 0\n  this._remainingTime = delay\n  this._callback = cb === undefined ? function () {} : cb\n\n  // fast binding\n  var restart = this.restart\n  var self = this\n  this.restart = function (n, u) { restart.call(self, n, u) }\n\n  if (this._delay === 0) this._stopped = true\n}\n\n/**\n * Set a new callback function.\n * @method\n * @param {function} newCallback New callback function. For convenience, a restart method will be passed as 1st arg of the cb function.\n * @param {number} [newDelay] Optional. Set a new delay (in ms). If set, the timer will be restarted\n */\nRafTimer.prototype.setCallback = function setCallback (newCallback, newDelay) {\n  this._callback = newCallback === undefined ? function () {} : newCallback\n  if (newDelay) this.restart(newDelay)\n}\n\n/**\n * Stop the timer. update() calls will do nothing.\n * @method\n */\nRafTimer.prototype.stop = function stop () {\n  this._stopped = true\n}\n\n/**\n * Start the timer if stopped.\n * @method\n */\nRafTimer.prototype.start = function start () {\n  if (!this._stopped) return\n  this.restart()\n}\n\n/**\n * Restart the timer\n * @method\n * @param {number} newDelay\n * @param {boolean} [useRemainder=true] Optional (default true). Use deltatime's remainder from the last time the timer hits 0.\n */\nRafTimer.prototype.restart = function restart (newDelay, useRemainder) {\n  if (useRemainder === void 0) useRemainder = true\n\n  if (newDelay !== undefined) this._delay = newDelay\n  this._stopped = false\n  this._remainingTime = this._delay - (this._remainder * (+useRemainder))\n}\n\n/**\n * Update remaining time. Usually executed inside a requestAnimationFrame call.\n * @method\n * @param {number} dt Time elapsed since the last call (in ms).\n */\nRafTimer.prototype.update = function update (dt) {\n  if (this._stopped) return\n  this._remainingTime -= dt\n  if (this._remainingTime <= 0) {\n    this._stopped = true\n    this._remainder = (-this._remainingTime) % this._delay\n    this._callback(this.restart)\n  } else {\n    this._remainder = 0\n  }\n}\n\n/**\n * Stop the timer and remove callback reference\n * @method\n */\nRafTimer.prototype.dispose = function dispose () {\n  this._callback = this.restart = function () {}\n  this._stopped = true\n  this._remainder = 0\n  this._remainingTime = this._delay\n}\n\nexport default RafTimer\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@internet/raf/lib/RafTimer.js\n// module id = 10\n// module chunks = 0","'use strict'\n\n/**\n * Core of the raf package\n * @module raf\n * @type {Object}\n * @example\n * import { raf } from '@internet/raf'\n *\n * function tick (dt) {\n *  console.log('called on new frame')\n * }\n *\n * raf.add(tick)\n */\n\nvar root = typeof window === 'undefined' ? global : window\nvar _observers = []\nvar _afterObservers = []\nvar _beforeObservers = []\nvar _rafHandler = null\nvar _lastDate = null\nvar _once = false\nvar _complex = false\n\n/**\n * Time elapsed between the previous and the current frame\n * @type {number}\n * @static\n * @category properties\n */\nvar time\n\n/**\n * Current delta time\n * @type {number}\n * @static\n * @category properties\n */\nvar dt\n\nfunction _frame (timestamp) {\n  // compute deltatime and time\n  if (timestamp === void 0) timestamp = 0\n  if (_lastDate === null) _lastDate = timestamp\n  dt = timestamp - _lastDate\n  time += dt\n  _lastDate = timestamp\n  // we request the frame now, allowing to cancel it from observers\n  _rafHandler = _once ? null : root.requestAnimationFrame(_frame)\n  if (_once) _once = false\n  // call all observers\n  var i\n  if (_complex) {\n    for (i = 0; i < _beforeObservers.length; i++) _beforeObservers[i](dt)\n    for (i = 0; i < _observers.length; i++) _observers[i](dt)\n    for (i = 0; i < _afterObservers.length; i++) _afterObservers[i](dt)\n  } else {\n    for (i = 0; i < _observers.length; i++) _observers[i](dt)\n  }\n}\n\nfunction _swapRunner () {\n  _complex = !!(_afterObservers.length > 0 || _beforeObservers.length > 0)\n}\n\nfunction _addObserver (arr, fn, prepend) {\n  if (!fn || !arr) return false\n  if (~arr.indexOf(fn)) return false\n  prepend = !!prepend\n  prepend ? arr.unshift(fn) : arr.push(fn)\n  return true\n}\n\nfunction _removeObserver (arr, fn) {\n  if (!fn) return false\n  var index = arr.indexOf(fn)\n  if (!~index) return false\n  arr.splice(index, 1)\n  return !!(arr.length === 0)\n}\n\n/**\n * Add a function for execution at the beginning of the raf call\n * Calling addBefore will not start the raf.\n * @param {function} fn Function to be called at the start of the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n * @static\n * @category methods\n */\nfunction addBefore (fn, prepend) {\n  _addObserver(_beforeObservers, fn, prepend) && _swapRunner()\n}\n\n/**\n * Add a function for execution at the end of the raf call\n * Calling addAfter will not start the raf.\n * @param {function} fn Function to be called at the end of the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n * @static\n * @category methods\n */\nfunction addAfter (fn, prepend) {\n  _addObserver(_afterObservers, fn, prepend) && _swapRunner()\n}\n\n/**\n * Add a function for execution on each frame\n * @param {function} fn Function to be called\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n * @static\n * @category methods\n */\nfunction add (fn, prepend) {\n  _addObserver(_observers, fn, prepend) && start()\n}\n\n/**\n * Remove a function for execution at the beginning of the raf call\n * Calling removeBefore will not stop the raf.\n * @param {function} fn Function to remove from the raf\n * @static\n * @category methods\n */\nfunction removeBefore (fn) {\n  _removeObserver(_beforeObservers, fn) && _swapRunner()\n}\n\n/**\n * Remove a function for execution at the end of the raf call\n * Calling removeAfter will not stop the raf.\n * @param {function} fn Function to remove from the raf\n * @param {function} [prepend=false] Prepend the function to the beginning of the functions list\n * @static\n * @category methods\n */\nfunction removeAfter (fn, prepend) {\n  _removeObserver(_afterObservers, fn) && _swapRunner()\n}\n\n/**\n * Remove a function for execution on each frame\n * @param {function} fn Function to remove from the raf\n * @static\n * @category methods\n */\nfunction remove (fn) {\n  _removeObserver(_observers, fn) && stop()\n}\n\n/**\n * Force start the raf. You usually don't need to use it.\n * @param {boolean} [instant=false] Directly make a raf call without waiting for the next frame (default false)\n * @static\n * @category methods\n */\nfunction start (instant) {\n  _once = false\n  if (_rafHandler) return\n  instant = !!instant\n  _lastDate = null\n  if (instant) _frame()\n  else _rafHandler = root.requestAnimationFrame(_frame)\n}\n\n/**\n * Request once the raf. Will not be executed if the raf is already running.\n * @static\n * @category methods\n */\nfunction requestOnce () {\n  if (_rafHandler) return\n  _once = true\n  _lastDate = null\n  _rafHandler = root.requestAnimationFrame(_frame)\n}\n\n/**\n * Force stop the raf. You usually don't need to use it.\n * @static\n * @category methods\n */\nfunction stop () {\n  if (!_rafHandler) return\n  root.cancelAnimationFrame(_rafHandler)\n  _rafHandler = null\n}\n\n/**\n * Remove all observers from the raf singleton and stop the raf if it's running. Reset time.\n * @static\n * @category methods\n */\nfunction dispose () {\n  stop()\n  _observers.length = 0\n  _afterObservers.length = 0\n  _beforeObservers.length = 0\n  _complex = false\n  _lastDate = null\n  time = 0\n  dt = 0\n}\n\nexport default {\n  add: add,\n  addAfter: addAfter,\n  addBefore: addBefore,\n  remove: remove,\n  removeAfter: removeAfter,\n  removeBefore: removeBefore,\n  start: start,\n  stop: stop,\n  time: time,\n  dt: dt,\n  requestOnce: requestOnce,\n  dispose: dispose\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@internet/raf/lib/raf.js\n// module id = 12\n// module chunks = 0","import randomOf from 'utils/array-random'\nimport lastOf from 'utils/array-last'\n\nexport default class RandomChain {\n  constructor (array = [], historyLength = 1, prng = Math.random) {\n    this.array = array\n    this.prng = prng\n\n    this.historyLength = Math.min(historyLength, array.length - 1)\n    this.reset()\n  }\n\n  reset () { this.history = [] }\n  get length () { return this.array.length }\n  get previous () { return lastOf(this.history) }\n\n  get next () {\n    if (!this.length) return\n\n    const item = randomOf(this.array, {\n      exclude: this.history,\n      prng: this.prng\n    })\n\n    return this.use(item)\n  }\n\n  use (item) {\n    if (!this.array.length) return\n\n    this.history.push(item)\n    if (this.history.length > this.historyLength) this.history.shift()\n\n    return item\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/abstractions/RandomChain.js","import intersectionOf from 'utils/array-intersection'\n\n/**\n * Pick a random entry of an array, not picking any value of the exclude array.\n * If no values can be picked because of the exclude array, skip the exclude\n * array.\n * A custom RNG can be specified.\n */\nfunction randomOf (arr, { exclude = undefined, prng = Math.random } = {}) {\n  const excludedValues = Array.isArray(exclude) ? exclude : [exclude]\n  const possibleValues = excludedValues && excludedValues.length\n    ? arr.filter(v => !excludedValues.includes(v))\n    : arr\n\n  const allValuesAreExcluded = intersectionOf(possibleValues, excludedValues).length === possibleValues.length\n  return allValuesAreExcluded\n    ? randomOf(arr, { exclude: undefined, prng })\n    : possibleValues[Math.floor(prng() * possibleValues.length)]\n}\n\nexport default randomOf\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/array-random.js","/**\n * Return an array of values which are present in both arr1 and arr2\n */\nexport default (arr1 = [], arr2 = []) => arr1.filter(v => arr2.includes(v))\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/array-intersection.js","export default arr => arr[arr.length - 1]\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/array-last.js","import { Howl, Howler } from 'howler'\nimport { time } from 'utils/logger'\nimport sequence from 'utils/filename-sequence'\n\nHowler.autoUnlock = false\n\nexport default class DroneHandler {\n  constructor ({\n    soundsLength = window.ENV.DroneHandler.soundsLength,\n    filenamePattern = window.ENV.DroneHandler.filenamePattern\n  } = {}) {\n    this.playNext = this.playNext.bind(this)\n\n    this.soundIndex = -1\n    this.sounds = []\n    for (let soundIndex = 0; soundIndex < soundsLength; soundIndex++) {\n      this.sounds.push(new Howl({\n        src: sequence(filenamePattern, { soundIndex }),\n        preload: false,\n        onend: this.playNext\n      }))\n    }\n  }\n\n  get currentSound () {\n    return this.sounds[this.soundIndex]\n  }\n\n  playNext () {\n    this.currentSound && this.currentSound.stop()\n\n    this.soundIndex = (this.soundIndex + 1) % this.sounds.length\n\n    const timer = time('Loading ' + this.currentSound._src)\n    this.currentSound.once('load', () => {\n      this.currentSound.play()\n      timer.end()\n    })\n    this.currentSound.load()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/abstractions/DroneHandler.js"],"sourceRoot":""}