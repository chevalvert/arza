{"version":3,"sources":["webpack:///6dac01ff5d8d406f48bd.js","webpack:///webpack/bootstrap 6dac01ff5d8d406f48bd","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./client/src/utils/logger.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack:///./node_modules/howler/dist/howler.js","webpack:///./client/src/utils/filename-sequence.js","webpack:///./client/src/index.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./client/src/abstractions/SfxHandler.js","webpack:///(webpack)/buildin/global.js","webpack:///./client/src/abstractions/RandomChain.js","webpack:///./client/src/utils/array-random.js","webpack:///./client/src/utils/array-intersection.js","webpack:///./client/src/utils/array-last.js","webpack:///./client/src/abstractions/DroneHandler.js","webpack:///./client/src/utils/random.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","writable","key","_createClass","protoProps","staticProps","__webpack_exports__","updateLog","container","innerHTML","entries","map","value","join","escapeHtml","unsafe","String","replace","log","message","method","window","ENV","app","logger","HISTORY_LENGTH","shift","lastEntry","increment","time","Date","counter","this","update","toUTCString","push","timers","now","entry","end","includes","document","getElementById","warn","error","_toConsumableArray","arr","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","_arrayLikeToArray","len","arr2","Array","HowlerGlobal","init","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","state","_autoSuspend","Audio","test","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","audio","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","src","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","indexOf","apply","fade","from","to","min","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","index","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","_endFn","splice","remCache","cache","on","events","off","isId","keys","isArray","msg","task","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","global","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","_unsupportedIterableToArray","F","done","_e","f","normalCompletion","didErr","step","next","_e2","return","minLen","toString","constructor","REGEX","tag","varname","numbering","pattern","context","result","baseIndex","padLength","number","padStart","setup","body","classList","add","fullscreen","requestFullscreen","video","querySelector","passivePlaybackRate","sfx","SfxHandler","DroneHandler","playNext","hardware","videoPlaybackRateRestorer","activePlaybackRate","random","triggerDuration","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray__","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray___default","__WEBPACK_IMPORTED_MODULE_1_abstractions_SfxHandler__","__WEBPACK_IMPORTED_MODULE_2_abstractions_DroneHandler__","__WEBPACK_IMPORTED_MODULE_3_utils_logger__","__WEBPACK_IMPORTED_MODULE_4_utils_random__","production","stack","_arrayWithoutHoles","arrayLikeToArray","_iterableToArray","iter","_nonIterableSpread","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_classCallCheck__","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_classCallCheck___default","__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_createClass__","__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_createClass___default","__WEBPACK_IMPORTED_MODULE_3_howler__","__WEBPACK_IMPORTED_MODULE_4_abstractions_RandomChain__","__WEBPACK_IMPORTED_MODULE_5_utils_logger__","__WEBPACK_IMPORTED_MODULE_6_utils_filename_sequence__","IndexesArray","fill","_","soundsLength","speakersLength","maxConcurrentPlays","filenamePattern","handleSoundLoad","preloadTimer","soundIndex","speakerIndex","sequence","soundsIndex","RandomChain","speakersIndex","reduce","speakers","filter","playingSounds","find","g","Function","eval","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default","__WEBPACK_IMPORTED_MODULE_2_utils_array_random__","__WEBPACK_IMPORTED_MODULE_3_utils_array_last__","array","historyLength","prng","history","lastOf","item","randomOf","exclude","use","excludedValues","possibleValues","v","intersectionOf","floor","arr1","__WEBPACK_IMPORTED_MODULE_2_howler__","__WEBPACK_IMPORTED_MODULE_4_utils_filename_sequence__","currentSound","timer"],"mappings":"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","file":"6dac01ff5d8d406f48bd.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 7);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = log;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return warn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return error; });\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = time;\nvar HISTORY_LENGTH = 10;\nvar container = document.getElementById('logger');\nvar entries = [];\nvar timers = {};\nvar lastEntry;\n\nfunction updateLog() {\n  container.innerHTML = entries.map(function (m) {\n    return m.value;\n  }).join('<br>');\n}\n\nfunction escapeHtml(unsafe) {\n  return String(unsafe).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n}\n\nfunction log(message) {\n  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'log';\n  if (!window.ENV.app.logger) return;\n  if (entries.length >= HISTORY_LENGTH) entries.shift();\n\n  if (lastEntry && lastEntry.message === message) {\n    lastEntry.increment();\n    return;\n  }\n\n  lastEntry = {\n    time: new Date(),\n    message: message,\n    method: method,\n    counter: 0,\n    increment: function increment() {\n      this.counter++;\n      this.time = new Date();\n      updateLog();\n    },\n    update: function update(message) {\n      this.message = message;\n      updateLog();\n    },\n\n    get value() {\n      return \"[\".concat(this.time.toUTCString(), \"] \").concat(this.counter ? \"[\".concat(this.counter, \"]\") : '', \" <span class='\").concat(this.method, \"'>\").concat(escapeHtml(this.message), \"</span>\");\n    }\n\n  };\n  entries.push(lastEntry);\n  updateLog();\n  return lastEntry;\n}\nvar warn = function warn(message) {\n  return log(message, 'warn');\n};\nvar error = function error(message) {\n  return log(message, 'error');\n};\nfunction time(name) {\n  timers[name] = Date.now();\n  var entry = log(name + ': …');\n  return {\n    end: function end() {\n      var message = name + ': ' + (Date.now() - timers[name]) + 'ms';\n      if (entries.includes(entry)) entry.update(message);else log(message);\n      delete timers[name];\n    }\n  };\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayWithoutHoles = __webpack_require__(9);\n\nvar iterableToArray = __webpack_require__(10);\n\nvar unsupportedIterableToArray = __webpack_require__(11);\n\nvar nonIterableSpread = __webpack_require__(12);\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Micro language allowing user to define filename pattern for files sequence,\n * using multiple variables with different n-based indexing and 0 padding:\n\n  {{foo:1}}.txt\n\n  for (var foo = 0; foo < 3; foo++)\n\n  → 1.txt\n  → 2.txt\n  → 3.txt\n\n  {{foo:001}}_{{bar:0}}.txt\n\n  for (var foo = 0; foo < 3; foo++)\n    for (var bar = 0; bar < 3; foo++)\n\n  → 001_0.txt\n  → 001_1.txt\n  → 001_2.txt\n  → 002_0.txt\n  → 002_1.txt\n  → 002_2.txt\n  → 003_0.txt\n  → 003_1.txt\n  → 003_2.txt\n */\nvar REGEX = {\n  tag: /{{[a-zA-Z_]+:[0-9]+}}/g,\n  varname: /{{([a-zA-Z_]+):[0-9]+}}/,\n  numbering: /{{[a-zA-Z_]+:([0-9]+)}}/\n};\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (pattern, context) {\n  var result = pattern; // Find all {{varname:000}} tags\n\n  var _iterator = _createForOfIteratorHelper(result.match(REGEX.tag)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var tag = _step.value;\n      var varname = tag.match(REGEX.varname)[1];\n      if (!varname || !context.hasOwnProperty(varname)) continue; // {{foo:00}} will start count at 0, {{foo:01}} at 1, etc…\n\n      var numbering = tag.match(REGEX.numbering)[1];\n      var baseIndex = parseInt(numbering);\n      var padLength = numbering.length;\n      var number = String(context[varname] + baseIndex).padStart(padLength, '0');\n      result = result.replace(tag, number);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n});\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(8);\nmodule.exports = __webpack_require__(21);\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_abstractions_SfxHandler__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_abstractions_DroneHandler__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_logger__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_utils_random__ = __webpack_require__(20);\n\n\n\n\n\nObject(__WEBPACK_IMPORTED_MODULE_3_utils_logger__[\"d\" /* warn */])('Logging is active. Set `app.logger` to false to disable logging.');\nif (!window.ENV.production) window.ENV.app.logger = true;\nwindow.addEventListener('click', function () {\n  try {\n    setup();\n  } catch (e) {\n    console.error(e);\n    Object(__WEBPACK_IMPORTED_MODULE_3_utils_logger__[\"a\" /* error */])(e.stack || e);\n  }\n}, {\n  once: true\n});\n\nfunction setup() {\n  document.body.classList.add('is-running'); // Enable fullscreen on production\n\n  if (window.ENV.app.fullscreen && document.body.requestFullscreen) {\n    document.body.requestFullscreen();\n  } // Load the video\n\n\n  var video = document.querySelector('video');\n  video.loop = true;\n  video.src = window.ENV.video.source;\n  video.playbackRate = window.ENV.video.passivePlaybackRate;\n  Object(__WEBPACK_IMPORTED_MODULE_3_utils_logger__[\"b\" /* log */])('Loading ' + video.src);\n  video.play(); // Instanciate the sfx handler\n\n  var sfx = new __WEBPACK_IMPORTED_MODULE_1_abstractions_SfxHandler__[\"a\" /* default */](); // Instanciate the drone handler\n\n  var droneHandler = new __WEBPACK_IMPORTED_MODULE_2_abstractions_DroneHandler__[\"a\" /* default */]();\n  droneHandler.playNext(); // Handle Arza hardware trigger events\n\n  window.addEventListener('keypress', function (e) {\n    if (e.key !== window.ENV.hardware.key) return;\n    if (!video.duration) return; // SFXHandler.play can return false if too much sounds are playing\n    // concurrently. This mecanism is used to limit the number of rapid triggers\n\n    var success = sfx.play();\n\n    if (!success) {\n      Object(__WEBPACK_IMPORTED_MODULE_3_utils_logger__[\"b\" /* log */])('ArzaNoise trigger has been skipped because too many sounds are playing');\n      return;\n    }\n\n    window.clearTimeout(window.videoPlaybackRateRestorer);\n    video.playbackRate = window.ENV.video.activePlaybackRate;\n    window.videoPlaybackRateRestorer = window.setTimeout(function () {\n      video.playbackRate = window.ENV.video.passivePlaybackRate;\n    }, __WEBPACK_IMPORTED_MODULE_4_utils_random__[\"a\" /* default */].apply(void 0, __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray___default()(window.ENV.video.triggerDuration)));\n    video.currentTime = video.duration - video.currentTime;\n  });\n}\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayLikeToArray = __webpack_require__(4);\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayLikeToArray = __webpack_require__(4);\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SfxHandler; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_classCallCheck__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_createClass__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_howler__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_howler___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_howler__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_abstractions_RandomChain__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_utils_logger__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_utils_filename_sequence__ = __webpack_require__(6);\n\n\n\n\n/* eslint-disable no-eval */\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_3_howler__[\"Howler\"].autoUnlock = false;\n\nvar IndexesArray = function IndexesArray(length) {\n  return new Array(length).fill(true).map(function (_, i) {\n    return i;\n  });\n};\n\nvar SfxHandler = /*#__PURE__*/function () {\n  function SfxHandler() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$soundsLength = _ref.soundsLength,\n        soundsLength = _ref$soundsLength === void 0 ? window.ENV.SfxHandler.soundsLength : _ref$soundsLength,\n        _ref$speakersLength = _ref.speakersLength,\n        speakersLength = _ref$speakersLength === void 0 ? window.ENV.SfxHandler.speakersLength : _ref$speakersLength,\n        _ref$maxConcurrentPla = _ref.maxConcurrentPlays,\n        maxConcurrentPlays = _ref$maxConcurrentPla === void 0 ? window.ENV.SfxHandler.maxConcurrentPlays : _ref$maxConcurrentPla,\n        _ref$filenamePattern = _ref.filenamePattern,\n        filenamePattern = _ref$filenamePattern === void 0 ? window.ENV.SfxHandler.filenamePattern : _ref$filenamePattern;\n\n    __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_classCallCheck___default()(this, SfxHandler);\n\n    this.play = this.play.bind(this);\n    this.handleSoundLoad = this.handleSoundLoad.bind(this);\n    this.maxConcurrentPlays = maxConcurrentPlays;\n    this.preloadTimer = Object(__WEBPACK_IMPORTED_MODULE_5_utils_logger__[\"c\" /* time */])('Preloading SFX sounds'); // Bi-dimensional array of all sounds\n\n    this.sounds = [];\n\n    for (var soundIndex = 0; soundIndex < soundsLength; soundIndex++) {\n      var sound = [];\n\n      for (var speakerIndex = 0; speakerIndex < speakersLength; speakerIndex++) {\n        sound.push(new __WEBPACK_IMPORTED_MODULE_3_howler__[\"Howl\"]({\n          src: Object(__WEBPACK_IMPORTED_MODULE_6_utils_filename_sequence__[\"a\" /* default */])(filenamePattern, {\n            soundIndex: soundIndex,\n            speakerIndex: speakerIndex\n          }),\n          preload: true,\n          onload: this.handleSoundLoad\n        }));\n      }\n\n      this.sounds.push(sound);\n    } // Random chain of all sounds indexes\n\n\n    this.soundsIndex = new __WEBPACK_IMPORTED_MODULE_4_abstractions_RandomChain__[\"a\" /* default */](IndexesArray(soundsLength), 2); // Random chain of all speakers indexes\n\n    this.speakersIndex = new __WEBPACK_IMPORTED_MODULE_4_abstractions_RandomChain__[\"a\" /* default */](IndexesArray(speakersLength), 2);\n  }\n\n  __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_createClass___default()(SfxHandler, [{\n    key: \"playingSounds\",\n    get: function get() {\n      return this.sounds.reduce(function (playing, speakers) {\n        return [].concat(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray___default()(playing), __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_toConsumableArray___default()(speakers.filter(function (sound) {\n          return sound.playing();\n        })));\n      }, []);\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      var soundIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.soundsIndex.next;\n      var speakerIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.speakersIndex.next;\n      if (this.playingSounds.length > this.maxConcurrentPlays) return;\n      var sound = this.sounds[soundIndex][speakerIndex];\n      Object(__WEBPACK_IMPORTED_MODULE_5_utils_logger__[\"b\" /* log */])('Playing ' + sound._src);\n      sound.play();\n      return true;\n    }\n  }, {\n    key: \"handleSoundLoad\",\n    value: function handleSoundLoad() {\n      if (!this.preloadTimer) return;\n      var loaded = !this.sounds.find(function (speakers) {\n        return speakers.find(function (sound) {\n          return sound.state() !== 'loaded';\n        });\n      });\n\n      if (loaded) {\n        this.preloadTimer.end();\n        delete this.preloadTimer;\n      }\n    }\n  }]);\n\n  return SfxHandler;\n}();\n\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return RandomChain; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_utils_array_random__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_array_last__ = __webpack_require__(18);\n\n\n\n\n\nvar RandomChain = /*#__PURE__*/function () {\n  function RandomChain() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var historyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var prng = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.random;\n\n    __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default()(this, RandomChain);\n\n    this.array = array;\n    this.prng = prng;\n    this.historyLength = Math.min(historyLength, array.length - 1);\n    this.reset();\n  }\n\n  __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default()(RandomChain, [{\n    key: \"reset\",\n    value: function reset() {\n      this.history = [];\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.array.length;\n    }\n  }, {\n    key: \"previous\",\n    get: function get() {\n      return Object(__WEBPACK_IMPORTED_MODULE_3_utils_array_last__[\"a\" /* default */])(this.history);\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      if (!this.length) return;\n      var item = Object(__WEBPACK_IMPORTED_MODULE_2_utils_array_random__[\"a\" /* default */])(this.array, {\n        exclude: this.history,\n        prng: this.prng\n      });\n      return this.use(item);\n    }\n  }, {\n    key: \"use\",\n    value: function use(item) {\n      if (!this.array.length) return;\n      this.history.push(item);\n      if (this.history.length > this.historyLength) this.history.shift();\n      return item;\n    }\n  }]);\n\n  return RandomChain;\n}();\n\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utils_array_intersection__ = __webpack_require__(17);\n\n/**\n * Pick a random entry of an array, not picking any value of the exclude array.\n * If no values can be picked because of the exclude array, skip the exclude\n * array.\n * A custom RNG can be specified.\n */\n\nfunction randomOf(arr) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$exclude = _ref.exclude,\n      exclude = _ref$exclude === void 0 ? undefined : _ref$exclude,\n      _ref$prng = _ref.prng,\n      prng = _ref$prng === void 0 ? Math.random : _ref$prng;\n\n  var excludedValues = Array.isArray(exclude) ? exclude : [exclude];\n  var possibleValues = excludedValues && excludedValues.length ? arr.filter(function (v) {\n    return !excludedValues.includes(v);\n  }) : arr;\n  var allValuesAreExcluded = Object(__WEBPACK_IMPORTED_MODULE_0_utils_array_intersection__[\"a\" /* default */])(possibleValues, excludedValues).length === possibleValues.length;\n  return allValuesAreExcluded ? randomOf(arr, {\n    exclude: undefined,\n    prng: prng\n  }) : possibleValues[Math.floor(prng() * possibleValues.length)];\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (randomOf);\n\n/***/ }),\n/* 17 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n * Return an array of values which are present in both arr1 and arr2\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (function () {\n  var arr1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var arr2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return arr1.filter(function (v) {\n    return arr2.includes(v);\n  });\n});\n\n/***/ }),\n/* 18 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (arr) {\n  return arr[arr.length - 1];\n});\n\n/***/ }),\n/* 19 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DroneHandler; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_howler__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_howler___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_howler__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_utils_logger__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_utils_filename_sequence__ = __webpack_require__(6);\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_2_howler__[\"Howler\"].autoUnlock = false;\n\nvar DroneHandler = /*#__PURE__*/function () {\n  function DroneHandler() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$volume = _ref.volume,\n        volume = _ref$volume === void 0 ? window.ENV.DroneHandler.volume : _ref$volume,\n        _ref$soundsLength = _ref.soundsLength,\n        soundsLength = _ref$soundsLength === void 0 ? window.ENV.DroneHandler.soundsLength : _ref$soundsLength,\n        _ref$filenamePattern = _ref.filenamePattern,\n        filenamePattern = _ref$filenamePattern === void 0 ? window.ENV.DroneHandler.filenamePattern : _ref$filenamePattern;\n\n    __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default()(this, DroneHandler);\n\n    this.playNext = this.playNext.bind(this);\n    this.soundIndex = -1;\n    this.sounds = [];\n\n    for (var soundIndex = 0; soundIndex < soundsLength; soundIndex++) {\n      this.sounds.push(new __WEBPACK_IMPORTED_MODULE_2_howler__[\"Howl\"]({\n        volume: volume,\n        src: Object(__WEBPACK_IMPORTED_MODULE_4_utils_filename_sequence__[\"a\" /* default */])(filenamePattern, {\n          soundIndex: soundIndex\n        }),\n        preload: false,\n        onend: this.playNext\n      }));\n    }\n  }\n\n  __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default()(DroneHandler, [{\n    key: \"currentSound\",\n    get: function get() {\n      return this.sounds[this.soundIndex];\n    }\n  }, {\n    key: \"playNext\",\n    value: function playNext() {\n      var _this = this;\n\n      this.currentSound && this.currentSound.stop();\n      this.soundIndex = (this.soundIndex + 1) % this.sounds.length;\n      var timer = Object(__WEBPACK_IMPORTED_MODULE_3_utils_logger__[\"c\" /* time */])('Loading ' + this.currentSound._src);\n      this.currentSound.once('load', function () {\n        _this.currentSound.play();\n\n        timer.end();\n      });\n      this.currentSound.load();\n    }\n  }]);\n\n  return DroneHandler;\n}();\n\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (min, max) {\n  return min + Math.random() * (max - min);\n});\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// 6dac01ff5d8d406f48bd.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6dac01ff5d8d406f48bd","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/classCallCheck.js\n// module id = 0\n// module chunks = 0","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/createClass.js\n// module id = 1\n// module chunks = 0","const HISTORY_LENGTH = 10\n\nconst container = document.getElementById('logger')\nconst entries = []\nconst timers = {}\n\nlet lastEntry\n\nfunction updateLog () {\n  container.innerHTML = entries.map(m => m.value).join('<br>')\n}\n\nfunction escapeHtml (unsafe) {\n  return String(unsafe)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;')\n}\n\nexport function log (message, method = 'log') {\n  if (!window.ENV.app.logger) return\n  if (entries.length >= HISTORY_LENGTH) entries.shift()\n\n  if (lastEntry && lastEntry.message === message) {\n    lastEntry.increment()\n    return\n  }\n\n  lastEntry = {\n    time: new Date(),\n    message,\n    method,\n    counter: 0,\n    increment: function () {\n      this.counter++\n      this.time = new Date()\n      updateLog()\n    },\n\n    update: function (message) {\n      this.message = message\n      updateLog()\n    },\n\n    get value () {\n      return `[${this.time.toUTCString()}] ${this.counter ? `[${this.counter}]` : ''} <span class='${this.method}'>${escapeHtml(this.message)}</span>`\n    }\n  }\n\n  entries.push(lastEntry)\n  updateLog()\n  return lastEntry\n}\n\nexport const warn = message => log(message, 'warn')\nexport const error = message => log(message, 'error')\n\nexport function time (name) {\n  timers[name] = Date.now()\n  const entry = log(name + ': …')\n\n  return {\n    end: () => {\n      const message = name + ': ' + (Date.now() - timers[name]) + 'ms'\n\n      if (entries.includes(entry)) entry.update(message)\n      else log(message)\n\n      delete timers[name]\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/logger.js","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/toConsumableArray.js\n// module id = 3\n// module chunks = 0","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\n// module id = 4\n// module chunks = 0","/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/howler/dist/howler.js\n// module id = 5\n// module chunks = 0","/**\n * Micro language allowing user to define filename pattern for files sequence,\n * using multiple variables with different n-based indexing and 0 padding:\n\n  {{foo:1}}.txt\n\n  for (var foo = 0; foo < 3; foo++)\n\n  → 1.txt\n  → 2.txt\n  → 3.txt\n\n  {{foo:001}}_{{bar:0}}.txt\n\n  for (var foo = 0; foo < 3; foo++)\n    for (var bar = 0; bar < 3; foo++)\n\n  → 001_0.txt\n  → 001_1.txt\n  → 001_2.txt\n  → 002_0.txt\n  → 002_1.txt\n  → 002_2.txt\n  → 003_0.txt\n  → 003_1.txt\n  → 003_2.txt\n */\n\nconst REGEX = {\n  tag: /{{[a-zA-Z_]+:[0-9]+}}/g,\n  varname: /{{([a-zA-Z_]+):[0-9]+}}/,\n  numbering: /{{[a-zA-Z_]+:([0-9]+)}}/\n}\n\nexport default (pattern, context) => {\n  let result = pattern\n\n  // Find all {{varname:000}} tags\n  for (const tag of result.match(REGEX.tag)) {\n    const varname = tag.match(REGEX.varname)[1]\n    if (!varname || !context.hasOwnProperty(varname)) continue\n\n    // {{foo:00}} will start count at 0, {{foo:01}} at 1, etc…\n    const numbering = tag.match(REGEX.numbering)[1]\n    const baseIndex = parseInt(numbering)\n    const padLength = numbering.length\n    const number = String(context[varname] + baseIndex).padStart(padLength, '0')\n\n    result = result.replace(tag, number)\n  }\n\n  return result\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/filename-sequence.js","import SfxHandler from 'abstractions/SfxHandler'\nimport DroneHandler from 'abstractions/DroneHandler'\nimport { error, log, warn } from 'utils/logger'\nimport random from 'utils/random'\n\nwarn('Logging is active. Set `app.logger` to false to disable logging.')\nif (!window.ENV.production) window.ENV.app.logger = true\n\nwindow.addEventListener('click', () => {\n  try {\n    setup()\n  } catch (e) {\n    console.error(e)\n    error(e.stack || e)\n  }\n}, { once: true })\n\nfunction setup () {\n  document.body.classList.add('is-running')\n\n  // Enable fullscreen on production\n  if (window.ENV.app.fullscreen && document.body.requestFullscreen) {\n    document.body.requestFullscreen()\n  }\n\n  // Load the video\n  const video = document.querySelector('video')\n  video.loop = true\n  video.src = window.ENV.video.source\n  video.playbackRate = window.ENV.video.passivePlaybackRate\n  log('Loading ' + video.src)\n  video.play()\n\n  // Instanciate the sfx handler\n  const sfx = new SfxHandler()\n\n  // Instanciate the drone handler\n  const droneHandler = new DroneHandler()\n  droneHandler.playNext()\n\n  // Handle Arza hardware trigger events\n  window.addEventListener('keypress', e => {\n    if (e.key !== window.ENV.hardware.key) return\n    if (!video.duration) return\n\n    // SFXHandler.play can return false if too much sounds are playing\n    // concurrently. This mecanism is used to limit the number of rapid triggers\n    const success = sfx.play()\n    if (!success) {\n      log('ArzaNoise trigger has been skipped because too many sounds are playing')\n      return\n    }\n\n    window.clearTimeout(window.videoPlaybackRateRestorer)\n    video.playbackRate = window.ENV.video.activePlaybackRate\n\n    window.videoPlaybackRateRestorer = window.setTimeout(() => {\n      video.playbackRate = window.ENV.video.passivePlaybackRate\n    }, random(...window.ENV.video.triggerDuration))\n\n    video.currentTime = video.duration - video.currentTime\n  })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/index.js","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\n// module id = 9\n// module chunks = 0","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/iterableToArray.js\n// module id = 10\n// module chunks = 0","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\n// module id = 11\n// module chunks = 0","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@babel/runtime/helpers/nonIterableSpread.js\n// module id = 12\n// module chunks = 0","/* eslint-disable no-eval */\nimport { Howl, Howler } from 'howler'\nimport RandomChain from 'abstractions/RandomChain'\nimport { log, time } from 'utils/logger'\nimport sequence from 'utils/filename-sequence'\n\nHowler.autoUnlock = false\n\nconst IndexesArray = length => new Array(length).fill(true).map((_, i) => i)\n\nexport default class SfxHandler {\n  constructor ({\n    soundsLength = window.ENV.SfxHandler.soundsLength,\n    speakersLength = window.ENV.SfxHandler.speakersLength,\n    maxConcurrentPlays = window.ENV.SfxHandler.maxConcurrentPlays,\n    filenamePattern = window.ENV.SfxHandler.filenamePattern\n  } = {}) {\n    this.play = this.play.bind(this)\n    this.handleSoundLoad = this.handleSoundLoad.bind(this)\n    this.maxConcurrentPlays = maxConcurrentPlays\n    this.preloadTimer = time('Preloading SFX sounds')\n\n    // Bi-dimensional array of all sounds\n    this.sounds = []\n    for (let soundIndex = 0; soundIndex < soundsLength; soundIndex++) {\n      const sound = []\n      for (let speakerIndex = 0; speakerIndex < speakersLength; speakerIndex++) {\n        sound.push(new Howl({\n          src: sequence(filenamePattern, { soundIndex, speakerIndex }),\n          preload: true,\n          onload: this.handleSoundLoad\n        }))\n      }\n      this.sounds.push(sound)\n    }\n\n    // Random chain of all sounds indexes\n    this.soundsIndex = new RandomChain(IndexesArray(soundsLength), 2)\n\n    // Random chain of all speakers indexes\n    this.speakersIndex = new RandomChain(IndexesArray(speakersLength), 2)\n  }\n\n  get playingSounds () {\n    return this.sounds.reduce((playing, speakers) => ([\n      ...playing,\n      ...speakers.filter(sound => sound.playing())\n    ]), [])\n  }\n\n  play (soundIndex = this.soundsIndex.next, speakerIndex = this.speakersIndex.next) {\n    if (this.playingSounds.length > this.maxConcurrentPlays) return\n\n    const sound = this.sounds[soundIndex][speakerIndex]\n    log('Playing ' + sound._src)\n    sound.play()\n    return true\n  }\n\n  handleSoundLoad () {\n    if (!this.preloadTimer) return\n\n    const loaded = !this.sounds.find(speakers => speakers.find(sound => sound.state() !== 'loaded'))\n    if (loaded) {\n      this.preloadTimer.end()\n      delete this.preloadTimer\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/abstractions/SfxHandler.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 14\n// module chunks = 0","import randomOf from 'utils/array-random'\nimport lastOf from 'utils/array-last'\n\nexport default class RandomChain {\n  constructor (array = [], historyLength = 1, prng = Math.random) {\n    this.array = array\n    this.prng = prng\n\n    this.historyLength = Math.min(historyLength, array.length - 1)\n    this.reset()\n  }\n\n  reset () { this.history = [] }\n  get length () { return this.array.length }\n  get previous () { return lastOf(this.history) }\n\n  get next () {\n    if (!this.length) return\n\n    const item = randomOf(this.array, {\n      exclude: this.history,\n      prng: this.prng\n    })\n\n    return this.use(item)\n  }\n\n  use (item) {\n    if (!this.array.length) return\n\n    this.history.push(item)\n    if (this.history.length > this.historyLength) this.history.shift()\n\n    return item\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/abstractions/RandomChain.js","import intersectionOf from 'utils/array-intersection'\n\n/**\n * Pick a random entry of an array, not picking any value of the exclude array.\n * If no values can be picked because of the exclude array, skip the exclude\n * array.\n * A custom RNG can be specified.\n */\nfunction randomOf (arr, { exclude = undefined, prng = Math.random } = {}) {\n  const excludedValues = Array.isArray(exclude) ? exclude : [exclude]\n  const possibleValues = excludedValues && excludedValues.length\n    ? arr.filter(v => !excludedValues.includes(v))\n    : arr\n\n  const allValuesAreExcluded = intersectionOf(possibleValues, excludedValues).length === possibleValues.length\n  return allValuesAreExcluded\n    ? randomOf(arr, { exclude: undefined, prng })\n    : possibleValues[Math.floor(prng() * possibleValues.length)]\n}\n\nexport default randomOf\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/array-random.js","/**\n * Return an array of values which are present in both arr1 and arr2\n */\nexport default (arr1 = [], arr2 = []) => arr1.filter(v => arr2.includes(v))\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/array-intersection.js","export default arr => arr[arr.length - 1]\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/array-last.js","import { Howl, Howler } from 'howler'\nimport { time } from 'utils/logger'\nimport sequence from 'utils/filename-sequence'\n\nHowler.autoUnlock = false\n\nexport default class DroneHandler {\n  constructor ({\n    volume = window.ENV.DroneHandler.volume,\n    soundsLength = window.ENV.DroneHandler.soundsLength,\n    filenamePattern = window.ENV.DroneHandler.filenamePattern\n  } = {}) {\n    this.playNext = this.playNext.bind(this)\n\n    this.soundIndex = -1\n    this.sounds = []\n    for (let soundIndex = 0; soundIndex < soundsLength; soundIndex++) {\n      this.sounds.push(new Howl({\n        volume,\n        src: sequence(filenamePattern, { soundIndex }),\n        preload: false,\n        onend: this.playNext\n      }))\n    }\n  }\n\n  get currentSound () {\n    return this.sounds[this.soundIndex]\n  }\n\n  playNext () {\n    this.currentSound && this.currentSound.stop()\n\n    this.soundIndex = (this.soundIndex + 1) % this.sounds.length\n\n    const timer = time('Loading ' + this.currentSound._src)\n    this.currentSound.once('load', () => {\n      this.currentSound.play()\n      timer.end()\n    })\n    this.currentSound.load()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/abstractions/DroneHandler.js","export default (min, max) => min + Math.random() * (max - min)\n\n\n\n// WEBPACK FOOTER //\n// ./client/src/utils/random.js"],"sourceRoot":""}